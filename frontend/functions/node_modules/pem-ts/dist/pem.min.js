var pem;(()=>{"use strict";var e={742:(e,t)=>{t.byteLength=function(e){var t=l(e),n=t[0],a=t[1];return 3*(n+a)/4-a},t.toByteArray=function(e){var t,n,o=l(e),i=o[0],s=o[1],c=new r(function(e,t,n){return 3*(t+n)/4-n}(0,i,s)),E=0,h=s>0?i-4:i;for(n=0;n<h;n+=4)t=a[e.charCodeAt(n)]<<18|a[e.charCodeAt(n+1)]<<12|a[e.charCodeAt(n+2)]<<6|a[e.charCodeAt(n+3)],c[E++]=t>>16&255,c[E++]=t>>8&255,c[E++]=255&t;return 2===s&&(t=a[e.charCodeAt(n)]<<2|a[e.charCodeAt(n+1)]>>4,c[E++]=255&t),1===s&&(t=a[e.charCodeAt(n)]<<10|a[e.charCodeAt(n+1)]<<4|a[e.charCodeAt(n+2)]>>2,c[E++]=t>>8&255,c[E++]=255&t),c},t.fromByteArray=function(e){for(var t,a=e.length,r=a%3,o=[],i=16383,s=0,l=a-r;s<l;s+=i)o.push(c(e,s,s+i>l?l:s+i));return 1===r?(t=e[a-1],o.push(n[t>>2]+n[t<<4&63]+"==")):2===r&&(t=(e[a-2]<<8)+e[a-1],o.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+"=")),o.join("")};for(var n=[],a=[],r="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",i=0,s=o.length;i<s;++i)n[i]=o[i],a[o.charCodeAt(i)]=i;function l(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function c(e,t,a){for(var r,o,i=[],s=t;s<a;s+=3)r=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),i.push(n[(o=r)>>18&63]+n[o>>12&63]+n[o>>6&63]+n[63&o]);return i.join("")}a["-".charCodeAt(0)]=62,a["_".charCodeAt(0)]=63},352:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.PEMObject=t.PEMError=t.rfc7468CompliantPEMLabels=void 0;const a=n(742);t.rfc7468CompliantPEMLabels=["X509 CERTIFICATE","CERTIFICATE","CERTIFICATE PAIR","TRUSTED CERTIFICATE","NEW CERTIFICATE REQUEST","CERTIFICATE REQUEST","X509 CRL","ANY PRIVATE KEY","PUBLIC KEY","RSA PRIVATE KEY","RSA PUBLIC KEY","DSA PRIVATE KEY","DSA PUBLIC KEY","PKCS7","PKCS #7 SIGNED DATA","ENCRYPTED PRIVATE KEY","PRIVATE KEY","DH PARAMETERS","SSL SESSION PARAMETERS","DSA PARAMETERS","ECDSA PUBLIC KEY","EC PARAMETERS","EC PRIVATE KEY","PARAMETERS","CMS","ATTRIBUTE CERTIFICATE"];class r extends Error{constructor(e){super(e)}}t.PEMError=r;class o{static preEncapsulationBoundaryRegex=/^-----BEGIN ([ \x21-\x7e]+)-----$/m;static postEncapsulationBoundaryRegex=/^-----END ([ \x21-\x7e]+)-----$/m;static base64LineRegex=/^[A-Za-z0-9+/=]+\s*$/gm;static pemObjectRegex=new RegExp(o.preEncapsulationBoundaryRegex.source+"\r?\n(?:\\s*\r?\n)*((?:"+o.base64LineRegex.source+"\r?\n)*)?"+o.postEncapsulationBoundaryRegex.source,"m");static validateLabel(e){if(!e.match(/^[A-Z#0-9 ]*$/))throw new r("Malformed PEM label.");if(e.match(/\s\s/))throw new r("PEM label cannot contain consecutive spaces.");if(e.match(/--/))throw new r("PEM label cannot contain consecutive hyphen-minuses.");if(e.match(/^\s+/)||e.match(/\s+$/))throw new r("PEM label cannot begin or end with spaces.");if(e.match(/^-+/)||e.match(/-+$/))throw new r("PEM label cannot begin or end with hyphen-minuses.")}static parse(e){let t,n=0;const a=[];do{if(t=o.pemObjectRegex.exec(e.slice(n)),null===t)break;n+=t.index+1;const r=new o(t[1],t[2].replace(/\s+/gu,""));a.push(r)}while(n<e.length);return a}_label="";get label(){return o.validateLabel(this._label),this._label}set label(e){o.validateLabel(e),this._label=e}data=new Uint8Array(0);get hasRFC7468CompliantLabel(){return t.rfc7468CompliantPEMLabels.includes(this._label)}get preEncapsulationBoundary(){return`-----BEGIN ${this.label}-----`}get postEncapsulationBoundary(){return`-----END ${this.label}-----`}get encapsulatedTextPortion(){return((0,a.fromByteArray)(this.data).match(/.{1,64}/g)||[]).join("\n")}constructor(e,t){void 0!==e&&(this.label=e),void 0!==t&&(this.data="string"==typeof t?(0,a.toByteArray)(t):t)}decode(e){const t=e.trim().replace("\r","").split("\n");if(t.length<=2)throw new r("PEM is too small to be valid");if(0!==t[0].indexOf("-----BEGIN "))throw new r("PEM object did not start with '-----BEGIN '");if(!t[0].endsWith("-----"))throw new r("PEM object did not end with '-----'");const n=t[0].slice(11,t[0].length-5);if(0!==t[t.length-1].indexOf("-----END "))throw new r("Last line of PEM object did not start with '-----END '");if(!t[t.length-1].endsWith("-----"))throw new r("Last line of PEM object did not end with '-----'");if(n!==t[t.length-1].slice(9,t[t.length-1].length-5))throw new r("PEM object Pre-encapsulation Boundary label does not match Post-encapsulation Boundary label.");this.label=n;let o=1;for(;o<t.length-1&&t[o].match(/^\s*$/);)o++;t.slice(o,t.length-1).forEach((e=>{if(e.match(/^\s*$/))throw new r("Blank lines detected within PEM data")}));const i=t.slice(1,t.length-1).join("").replace(/\s+/g,"");this.data=(0,a.toByteArray)(i)}get encoded(){return this.preEncapsulationBoundary+"\n"+this.encapsulatedTextPortion+"\n"+this.postEncapsulationBoundary}}t.PEMObject=o}},t={},n=function n(a){var r=t[a];if(void 0!==r)return r.exports;var o=t[a]={exports:{}};return e[a](o,o.exports,n),o.exports}(352);pem=n})();